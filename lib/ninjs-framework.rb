class NinjsFramework < Ninjs::Framework
  def initialize
    super({
      name: 'ninjs',
      manifest: [
        'application',
        'elements',
        'lib',
        'models',
        'modules',
        'plugins',
        'spec',
        'spec/javascripts',
        'spec/javascripts/support'
      ],
      defaults: {
        name: 'application',
        framework: 'ninjs',
        src_dir: 'modules',
        dest_dir: 'application',
        asset_root: '../',
        output: 'expanded',
        dependencies: ['<jquery/latest>'],
        autoload: ['../lib/utilities'],
        module_alias: 'm'
      }
    })
  end
=begin
  def create(root)
    @root = root
    create_ninjs_lib_file
    create_utility_lib_file
    create_ninjs_application_file
    import_rakefile
    import_spec_files
  end

  def update(root)
    @root = root
    update_application_file
  end
  
  def create_ninjs_lib_file
    operation = File.exists?("#{@root}/lib/nin.js") ? 'updated' : 'created'
    ninjs_lib_secretary = Sprockets::Secretary.new(
      :root         => "#{Ninjs::BASE_DIR}",
      :load_path    => ["repository"],
      source_files: ["repository/ninjs/core/nin.js"]
    )

    ninjs_lib_secretary.concatenation.save_to "#{@root}/lib/nin.js"

    puts Ninjs::Notification.added "lib/nin.js #{operation}"
  end
  
  def create_utility_lib_file
    utility_lib_secretary = Sprockets::Secretary.new(
      root: "#{Ninjs::BASE_DIR}",
      load_path: ["repository"],
      source_files: ["repository/ninjs/utilities/all.js"]
    )
    
    utility_lib_secretary.concatenation.save_to "#{@root}/lib/utilities.js"
    
    puts Ninjs::Notification.added "lib/utilities.js created"
  end
  
  def create_ninjs_application_file
    File.open("#{@root}/application/#{@config.name.downcase}.js", "w+") do |file|
      file << "//-- This file was automatically generated by Ninjs @ #{Time.now.to_s} DO NOT EDIT THIS FILE --//\n"
      file << File.open("#{@root}/lib/nin.js", 'r').readlines.join('')
      file << "\nvar #{@config.name} = new NinjsApplication();"
    end
  end

  def import_rakefile
    FileUtils.cp "#{Ninjs::BASE_DIR}/repository/ninjs/Rakefile", "#{@root}/Rakefile"
  end

  def import_spec_files
    {
      'repository/ninjs/spec/javascripts/application_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/array_utility_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/existence_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/extension_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/module_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/string_utility_spec.js' => 'spec/javascripts/',
      'repository/ninjs/spec/javascripts/support/jasmine_config.rb' => 'spec/javascripts/support',
      'repository/ninjs/spec/javascripts/support/jasmine_runner.rb' => 'spec/javascripts/support',
      'templates/test-index.html' => 'spec/index.html',
      'templates/jasmine.yml' => 'spec/javascripts/support/'
    }.each { |src, dest| import_spec_file src, dest }
  end

  def import_spec_file(src, dest)
    FileUtils.cp "#{Ninjs::BASE_DIR}/#{src}", "#{@root}/#{dest}"
  end

  def update_application_file
    application_file = "#{@root}/#{@config.dest_dir}/#{@config.name.downcase}.js"
    
    File.open(application_file, "w+") do |file|
      write_dependencies(file)
      write_core(file)
      write_autoload(file)
    end
    
    compile_application_file application_file
  end
  
  def write_dependencies(file)
    @config.dependencies.each do |dependency|
      file << "/*---------- #{dependency} ----------*/"
      file << "\n//= require #{dependency}\n\n" if dependency.match(/^\<.+\>$/)
      file << "\n//= require \"#{dependency}\"\n\n" if dependency.match(/^[^\<].+|[^\>]$/)
    end
  end
  
  def write_core(file)      
    file << "/*---------- Ninjs core ../lib/nin.js ----------*/\n"
    file << "//= require \"../lib/nin.js\"\n\n"
    file << "\nvar #{@config.name} = new NinjsApplication();\n\n"
  end
  
  def write_autoload(file)
    @config.autoload.each do |auto_file|
      file << "/*---------- Ninjs autoload #{auto_file} ----------*/"
      file << "\n//= require #{auto_file}\n\n" if auto_file.match(/^\<.+\>$/)
      file << "\n//= require \"#{auto_file}\"\n\n" if auto_file.match(/^[^\<].+|[^\>]$/)
    end
  end
  
  def compile_application_file(file)
    begin
      ninjs_lib_secretary = Sprockets::Secretary.new(
        :root         => "#{Ninjs::BASE_DIR}",
        :asset_root   => @config.asset_root,
        :load_path    => ["repository"],
        source_files: ["#{file}"]
      )

      application_file = ninjs_lib_secretary.concatenation
      ninjs_lib_secretary.install_assets
      application_file.save_to "#{file}"
    rescue Exception => error
      @errors = true
      puts Ninjs::Notification.error "Sprockets error: #{error.message}"
    end
  end
=end
end